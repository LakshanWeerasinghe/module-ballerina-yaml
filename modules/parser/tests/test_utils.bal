// Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import ballerina/test;
import yaml.common;
import yaml.lexer;

# Assert an event generated by the parser.
#
# + lines - YAML lines to be parsed
# + value - Expected value of the event
# + tag - Expected tag of the event
# + anchor - Expected anchor of the event 
# + customTagHandles - Defined tag handles for the parser
# + return - An error on parsing failure
function assertParsingEvent(string|string[] lines, string value = "", string tag = "",
    string anchor = "", map<string>? customTagHandles = ()) returns error? {
    ParserState state = check new ((lines is string) ? [lines] : lines);
    if customTagHandles != () {
        state.customTagHandles = customTagHandles;
    }

    common:Event event = check parse(state);

    if value.length() > 0 {
        test:assertEquals((<common:ScalarEvent>event).value, value);
    }

    if tag.length() > 0 {
        test:assertEquals((<common:ScalarEvent>event).tag, tag);
    }

    if anchor.length() > 0 {
        test:assertEquals((<common:ScalarEvent>event).anchor, anchor);
    }
}

# Assert if an parsing error is generated during the parsing
#
# + lines - Lines to be parsed.  
# + isLexical - If set, checks for Lexical errors. Else, checks for Parsing errors.  
# + eventNumber - Number of times to parse before the error is generated.  
# + customTagHandles - Defined tag handles for the parser
# + return - An parsing error if the line is empty.
function assertParsingError(string|string[] lines, boolean isLexical = false, int eventNumber = 1,
    map<string>? customTagHandles = ()) returns error? {
    ParserState state = check new ((lines is string) ? [lines] : lines);

    if customTagHandles != () {
        state.customTagHandles = customTagHandles;
    }

    common:Event|error err;

    foreach int i in 1 ... eventNumber {
        err = parse(state, docType = ANY_DOCUMENT);
    }

    if isLexical {
        test:assertTrue(err is lexer:LexicalError);
    } else {
        test:assertTrue(err is ParsingError);
    }
}
